Traceback (most recent call last):
  File "/home/jay/da6401_assignment3/plot_heatmap.py", line 92, in <module>
    tensor_img = attention_to_tensor(decoded_input, decoded_output, attention_weights, f"{word} - {''.join(decoded_output)}")
  File "/home/jay/da6401_assignment3/plot_heatmap.py", line 60, in attention_to_tensor
    sns.heatmap(attention_weights, xticklabels=input_chars, yticklabels=output_chars,
  File "/home/jay/miniconda3/envs/Sequence/lib/python3.10/site-packages/seaborn/matrix.py", line 446, in heatmap
    plotter = _HeatMapper(data, vmin, vmax, cmap, center, robust, annot, fmt,
  File "/home/jay/miniconda3/envs/Sequence/lib/python3.10/site-packages/seaborn/matrix.py", line 163, in __init__
    self._determine_cmap_params(plot_data, vmin, vmax,
  File "/home/jay/miniconda3/envs/Sequence/lib/python3.10/site-packages/seaborn/matrix.py", line 202, in _determine_cmap_params
    vmin = np.nanmin(calc_data)
  File "/home/jay/miniconda3/envs/Sequence/lib/python3.10/site-packages/numpy/lib/_nanfunctions_impl.py", line 357, in nanmin
    res = np.fmin.reduce(a, axis=axis, out=out, **kwargs)
ValueError: zero-size array to reduction operation fmin which has no identity
Exception ignored in atexit callback: <function _start_and_connect_service.<locals>.teardown_atexit at 0x795163673010>
Traceback (most recent call last):
  File "/home/jay/miniconda3/envs/Sequence/lib/python3.10/site-packages/wandb/sdk/lib/service_connection.py", line 94, in teardown_atexit
    conn.teardown(hooks.exit_code)
  File "/home/jay/miniconda3/envs/Sequence/lib/python3.10/site-packages/wandb/sdk/lib/service_connection.py", line 226, in teardown
    self._router.join()
  File "/home/jay/miniconda3/envs/Sequence/lib/python3.10/site-packages/wandb/sdk/interface/router.py", line 75, in join
    self._thread.join()
  File "/home/jay/miniconda3/envs/Sequence/lib/python3.10/threading.py", line 1096, in join
    self._wait_for_tstate_lock()
  File "/home/jay/miniconda3/envs/Sequence/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
KeyboardInterrupt:
